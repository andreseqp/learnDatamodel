
  void agent::printIndData(ofstream &learnSeries, int &seed, double &outbr, 
                         double pV, double pR){
  learnSeries << seed << '\t' << age << '\t';
  //cout << seed << '\t' << age << '\t';
  learnSeries << alpha << '\t' << gamma << '\t';
  learnSeries << neta << '\t' << alphath << '\t' << pV << '\t';
  learnSeries << pR << '\t' << theta[0] << '\t';
  learnSeries << theta[1] << '\t' << outbr << '\t';
  learnSeries << cleanOptionsT[0] << '\t' << cleanOptionsT[1] << '\t';
  learnSeries << cleanOptionsT[choiceT] << '\t';
  //cout << cleanOptionsT[0] << '\t' << cleanOptionsT[1] << '\t' << choiceT << '\t';
  learnSeries << currentReward << '\t' << cumulReward << '\t' << negRew_curr << '\t';
  //cout << currentReward << '\t' << cumulReward << '\t';
  for (int j = 0; j < numEst; j++)
  {
    learnSeries << values[j] << '\t';
    //cout << values[j] << '\t';
  }
  learnSeries << endl;
  //cout << endl;
}

bool agent::isRVoption(int time) {
  if (time == 0) {
    return(cleanOptionsT[0] + cleanOptionsT[1] == 1);
  }
  else {
    return(cleanOptionsT1[0] + cleanOptionsT1[1] == 1);
  }
}



